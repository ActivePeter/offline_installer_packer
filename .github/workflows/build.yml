name: Build for x86 and ARM

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-18.04']
        arch: ['x86_64', 'arm64']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up QEMU
      if: matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v1

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Configure environment for ARM
      if: matrix.arch == 'arm64'
      run: |
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y python3.8:arm64

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build project
      run: |
        # 这里是你的构建命令
        python setup.py

    - name: List release folders
      id: list_folders
      run: |
        python3 -c '
        import yaml
        folders = [f"releases/{d[:-3]}" for d in os.listdir("./") if d.endswith(".py"))]
        print("::set-output name=folders::" + json.dumps(folders))
        '

    - name: Create releases
      if: ${{ steps.list_folders.outputs.folders != '[]' }}
      strategy:
        matrix:
          folder: ${{ fromJson(steps.list_folders.outputs.folders) }}
      run: |
        echo "Creating release for folder: ${{ matrix.folder }}"
        # 这里添加创建release的逻辑
        # 例如，使用gh release create命令
        gh release create $(basename ${{ matrix.folder }}) --title "Release for ${{ matrix.folder }}" --notes "Automated release"
    # - name: Test project
    #   run: |
    #     pytest

    # - name: Package project
    #   run: |
    #     # 打包命令
    #     python setup.py sdist bdist_wheel